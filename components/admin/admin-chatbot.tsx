"use client";

import React, { useState, useRef, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { MessageCircle, X, Minimize2, Maximize2, Send } from "lucide-react";
import { cn } from "@/lib/utils";

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
}

interface AdminChatbotProps {
  userRole: string;
}

// Componente para renderizar texto com markdown b√°sico
const MarkdownText: React.FC<{ text: string }> = ({ text }) => {
  const renderText = (text: string) => {
    // Substitui **texto** por <strong>texto</strong>
    const parts = text.split(/(\*\*.*?\*\*)/);
    return parts.map((part, index) => {
      if (part.startsWith('**') && part.endsWith('**')) {
        return <strong key={index}>{part.slice(2, -2)}</strong>;
      }
      return part;
    });
  };

  return <span>{renderText(text)}</span>;
};

const AdminChatbot: React.FC<AdminChatbotProps> = ({ userRole }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'ü§ñ **Ol√°! Sou seu assistente do Admin SD!**\n\nSou especializado em gest√£o de condom√≠nios e posso ajudar com **todas as funcionalidades** do sistema.\n\n**üìö Conhecimento dispon√≠vel:**\n‚Ä¢ **Navega√ß√£o** e uso do sistema\n‚Ä¢ **Agendamentos** de espa√ßos comuns\n‚Ä¢ **Gest√£o de moradores** e apartamentos\n‚Ä¢ **Controle de visitantes** e portaria\n‚Ä¢ **Sistema financeiro** e boletos\n‚Ä¢ **Relat√≥rios** e dashboard\n‚Ä¢ **Configura√ß√µes** e personaliza√ß√£o\n\n**‚ö° Funcionamento 100% offline** - sempre dispon√≠vel!\n\n**Como posso ajud√°-lo hoje?**',
      sender: 'bot',
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Auto scroll para a √∫ltima mensagem
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // N√£o renderizar para usu√°rios que n√£o s√£o admin
  if (userRole !== 'admin') {
    return null;
  }

  // Respostas locais otimizadas
  const generateLocalResponse = (userMessage: string): string => {
    const msg = userMessage.toLowerCase();
    
    if (msg.includes('navegar') || msg.includes('menu') || msg.includes('onde') || msg.includes('encontrar')) {
      return 'üß≠ **Navega√ß√£o do Sistema:**\n\n**Menu Principal (Sidebar):**\n‚Ä¢ **Overview** - Dashboard com estat√≠sticas\n‚Ä¢ **Agendamentos** - Reservas de espa√ßos\n‚Ä¢ **Boletos** - Gest√£o financeira\n‚Ä¢ **Moradores** - Gest√£o de residentes\n‚Ä¢ **Visitantes** - Controle de acesso\n‚Ä¢ **Portaria** - QR Codes e seguran√ßa\n‚Ä¢ **Relat√≥rios** - Dashboard e exporta√ß√£o\n‚Ä¢ **Configura√ß√µes** - Personaliza√ß√£o\n\n**Dica:** Use o √≠cone ‚ò∞ para expandir/recolher!';
    }
    
    if (msg.includes('agendamento') || msg.includes('reserva') || msg.includes('espa√ßo')) {
      return 'üìÖ **Agendamentos:**\n\n**Como reservar:**\n1. Menu **"Agendamentos"**\n2. Clique **"Nova Reserva"**\n3. Escolha o espa√ßo\n4. Defina data/hor√°rio\n5. Confirme\n\n**Espa√ßos:**\n‚Ä¢ **Churrasqueira** - R$ 200/dia\n‚Ä¢ **Sal√£o de Festas** - R$ 150/dia\n‚Ä¢ **Quadra, Piscina, Playground**\n\n**Cancelamento:** At√© 24h antes';
    }
    
    if (msg.includes('morador') || msg.includes('apartamento')) {
      return 'üè† **Moradores:**\n\n**Funcionalidades:**\n‚Ä¢ Cadastrar novos moradores\n‚Ä¢ Associar a apartamentos\n‚Ä¢ Gerenciar propriet√°rios/inquilinos\n‚Ä¢ Controlar pets e ve√≠culos\n‚Ä¢ Hist√≥rico de atividades\n\n**Como cadastrar:**\n1. Menu **"Moradores"**\n2. **"Adicionar"**\n3. Preencha dados\n4. Selecione apartamento\n5. Salvar';
    }
    
    if (msg.includes('visitante') || msg.includes('portaria') || msg.includes('qr')) {
      return 'üö™ **Portaria Digital:**\n\n**QR Code para visitantes:**\n1. Menu **"Portaria"**\n2. **"Cadastrar Visitante"**\n3. Dados do visitante\n4. Apartamento destino\n5. **QR Code gerado automaticamente**\n\n**Validade:** 24h\n**Seguran√ßa:** C√≥digos √∫nicos\n**Controle:** Entrada/sa√≠da autom√°tica';
    }
    
    if (msg.includes('boleto') || msg.includes('financeiro')) {
      return 'üí∞ **Sistema Financeiro:**\n\n**Boletos:**\n‚Ä¢ Gera√ß√£o autom√°tica\n‚Ä¢ Controle vencimentos\n‚Ä¢ Status: Pendente/Pago/Vencido\n‚Ä¢ Notifica√ß√µes autom√°ticas\n\n**Como gerar:**\n1. Menu **"Boletos"**\n2. **"Novo Boleto"**\n3. Selecione apartamento\n4. Valor e vencimento\n5. Descri√ß√£o\n6. Confirmar';
    }
    
    if (msg.includes('relat√≥rio') || msg.includes('dashboard') || msg.includes('overview')) {
      return 'üìä **Relat√≥rios e Dashboard:**\n\n**Overview:**\n‚Ä¢ Estat√≠sticas gerais do condom√≠nio\n‚Ä¢ Gr√°ficos interativos\n‚Ä¢ Indicadores financeiros\n‚Ä¢ Status dos apartamentos\n\n**Relat√≥rios:**\n‚Ä¢ Financeiro detalhado\n‚Ä¢ Ocupa√ß√£o de espa√ßos\n‚Ä¢ Controle de visitantes\n‚Ä¢ Exporta√ß√£o PDF/Excel\n\n**Acesso:** Menu lateral **"Relat√≥rios"**';
    }
    
    if (msg.includes('funcion√°rio') || msg.includes('colaborador') || msg.includes('porteiro')) {
      return 'üë• **Gest√£o de Funcion√°rios:**\n\n**Tipos:**\n‚Ä¢ Porteiros\n‚Ä¢ Zeladores\n‚Ä¢ Seguran√ßa\n‚Ä¢ Limpeza\n‚Ä¢ Manuten√ß√£o\n\n**Funcionalidades:**\n‚Ä¢ Cadastro completo\n‚Ä¢ Escalas de trabalho\n‚Ä¢ Controle de acesso\n‚Ä¢ Hist√≥rico de atividades\n\n**Acesso:** Menu **"Funcion√°rios"**';
    }
    
    if (msg.includes('encomenda') || msg.includes('entrega') || msg.includes('correspond√™ncia')) {
      return 'üì¶ **Controle de Encomendas:**\n\n**Funcionalidades:**\n‚Ä¢ Registro de entregas\n‚Ä¢ Notifica√ß√£o autom√°tica aos moradores\n‚Ä¢ Status: Pendente/Retirada\n‚Ä¢ Hist√≥rico completo\n‚Ä¢ Comprovante de entrega\n\n**Como registrar:**\n1. Menu **"Encomendas"**\n2. **"Nova Entrega"**\n3. Dados da encomenda\n4. Apartamento destinat√°rio\n5. Confirmar';
    }
    
    if (msg.includes('documenta√ß√£o') || msg.includes('ata') || msg.includes('conven√ß√£o')) {
      return 'üìã **Documenta√ß√£o:**\n\n**Documentos dispon√≠veis:**\n‚Ä¢ Conven√ß√£o do condom√≠nio\n‚Ä¢ Regimento interno\n‚Ä¢ Atas de reuni√£o\n‚Ä¢ Documentos legais\n‚Ä¢ Manuais do sistema\n\n**Funcionalidades:**\n‚Ä¢ Upload de arquivos\n‚Ä¢ Organiza√ß√£o por categorias\n‚Ä¢ Controle de vers√µes\n‚Ä¢ Acesso controlado\n\n**Acesso:** Menu **"Documenta√ß√£o"**';
    }
    
    if (msg.includes('gastos') || msg.includes('despesa') || msg.includes('contas')) {
      return 'üí∏ **Controle de Gastos:**\n\n**Categorias:**\n‚Ä¢ Manuten√ß√£o\n‚Ä¢ Limpeza\n‚Ä¢ Seguran√ßa\n‚Ä¢ Energia\n‚Ä¢ √Ågua\n‚Ä¢ Outros\n\n**Funcionalidades:**\n‚Ä¢ Registro de despesas\n‚Ä¢ Upload de comprovantes\n‚Ä¢ Relat√≥rios por per√≠odo\n‚Ä¢ Controle or√ßament√°rio\n\n**Acesso:** Menu **"Gastos"**';
    }
    
    if (msg.includes('ouvidoria') || msg.includes('reclama√ß√£o') || msg.includes('sugest√£o')) {
      return 'üó£Ô∏è **Ouvidoria:**\n\n**Tipos de solicita√ß√£o:**\n‚Ä¢ Reclama√ß√µes\n‚Ä¢ Sugest√µes\n‚Ä¢ Den√∫ncias\n‚Ä¢ Elogios\n‚Ä¢ Solicita√ß√µes gerais\n\n**Processo:**\n‚Ä¢ Registro da solicita√ß√£o\n‚Ä¢ An√°lise pela administra√ß√£o\n‚Ä¢ Resposta ao solicitante\n‚Ä¢ Acompanhamento do status\n\n**Acesso:** Menu **"Ouvidoria"**';
    }
    
    if (msg.includes('parking') || msg.includes('vaga') || msg.includes('estacionamento')) {
      return 'üöó **Controle de Parkings:**\n\n**Tipos de vaga:**\n‚Ä¢ Fixas (propriet√°rios)\n‚Ä¢ Rotativas (visitantes)\n‚Ä¢ Especiais (deficientes)\n‚Ä¢ Motocicletas\n\n**Funcionalidades:**\n‚Ä¢ Associa√ß√£o morador-vaga\n‚Ä¢ Controle de ocupa√ß√£o\n‚Ä¢ Relat√≥rios de uso\n‚Ä¢ Gest√£o de multas\n\n**Acesso:** Menu **"Parkings"**';
    }
    
    if (msg.includes('reuni√£o') || msg.includes('assembleia') || msg.includes('videoconfer√™ncia')) {
      return 'üé• **Reuni√£o Online:**\n\n**Funcionalidades:**\n‚Ä¢ Agendar assembleias\n‚Ä¢ Videoconfer√™ncias\n‚Ä¢ Controle de presen√ßa\n‚Ä¢ Grava√ß√£o de reuni√µes\n‚Ä¢ Atas autom√°ticas\n\n**Como agendar:**\n1. Menu **"Reuni√£o Online"**\n2. **"Nova Reuni√£o"**\n3. Data e hor√°rio\n4. Pauta da reuni√£o\n5. Enviar convites\n\n**Plataforma integrada** para facilitar a participa√ß√£o.';
    }
    
    if (msg.includes('servi√ßo') || msg.includes('prestador') || msg.includes('manuten√ß√£o')) {
      return 'üîß **Servi√ßos:**\n\n**Prestadores cadastrados:**\n‚Ä¢ Eletricistas\n‚Ä¢ Encanadores\n‚Ä¢ Pintores\n‚Ä¢ Jardineiros\n‚Ä¢ T√©cnicos diversos\n\n**Funcionalidades:**\n‚Ä¢ Cadastro de prestadores\n‚Ä¢ Avalia√ß√µes e coment√°rios\n‚Ä¢ Hist√≥rico de servi√ßos\n‚Ä¢ Agendamento\n‚Ä¢ Controle de acesso\n\n**Acesso:** Menu **"Servi√ßos"**';
    }
    
    if (msg.includes('usu√°rio') || msg.includes('user') || msg.includes('permiss√£o')) {
      return 'ÔøΩ **Gest√£o de Usu√°rios:**\n\n**Tipos de usu√°rio:**\n‚Ä¢ **ADMIN** - Acesso total\n‚Ä¢ **FUNCIONARIO** - Portaria, visitantes, encomendas\n‚Ä¢ **MORADOR** - Perfil, boletos, reservas pr√≥prias\n\n**Funcionalidades:**\n‚Ä¢ Criar/editar usu√°rios\n‚Ä¢ Definir permiss√µes\n‚Ä¢ Resetar senhas\n‚Ä¢ Controle de acesso\n\n**Acesso:** Menu **"Users"**';
    }
    
    if (msg.includes('configura√ß√£o') || msg.includes('personaliza√ß√£o') || msg.includes('sistema')) {
      return '‚öôÔ∏è **Configura√ß√µes do Sistema:**\n\n**Personaliza√ß√µes:**\n‚Ä¢ Dados do condom√≠nio\n‚Ä¢ Logo e cores\n‚Ä¢ Notifica√ß√µes\n‚Ä¢ Backup autom√°tico\n‚Ä¢ Integra√ß√µes\n\n**Configura√ß√µes gerais:**\n‚Ä¢ Hor√°rios de funcionamento\n‚Ä¢ Regras de agendamento\n‚Ä¢ Valores de taxas\n‚Ä¢ Pol√≠ticas de uso\n\n**Acesso restrito** a administradores.';
    }
    
    if (msg.includes('oi') || msg.includes('ol√°') || msg.includes('hello') || msg.includes('bom dia') || msg.includes('boa tarde') || msg.includes('boa noite')) {
      return 'üëã **Ol√°! Bem-vindo ao Admin SD!**\n\nSou seu assistente especializado em gest√£o de condom√≠nios.\n\nüè† **√Åreas que domino:**\n‚Ä¢ Moradores e Apartamentos\n‚Ä¢ Agendamentos e Espa√ßos\n‚Ä¢ Portaria e Visitantes\n‚Ä¢ Boletos e Financeiro\n‚Ä¢ Relat√≥rios e Dashboard\n‚Ä¢ Encomendas e Correspond√™ncias\n‚Ä¢ Funcion√°rios e Servi√ßos\n‚Ä¢ Documenta√ß√£o e Ouvidoria\n‚Ä¢ Configura√ß√µes do Sistema\n\n**Como posso ajudar?** üòä\n\n*Exemplo: "Como fazer agendamentos" ou "Onde cadastrar moradores"*';
    }
    
    if (msg.includes('help') || msg.includes('ajuda') || msg.includes('como usar') || msg.includes('tutorial')) {
      return 'üÜò **Como usar o Sistema:**\n\n**Navega√ß√£o:**\n‚Ä¢ Use o **menu lateral** para acessar as √°reas\n‚Ä¢ **Dashboard** mostra informa√ß√µes resumidas\n‚Ä¢ **Filtros** facilitam a busca\n\n**A√ß√µes comuns:**\n‚Ä¢ **Adicionar** - Bot√µes verdes\n‚Ä¢ **Editar** - √çcone l√°pis\n‚Ä¢ **Excluir** - √çcone lixeira\n‚Ä¢ **Visualizar** - √çcone olho\n\n**Dicas:**\n‚Ä¢ Use **Ctrl+F** para buscar na p√°gina\n‚Ä¢ **Dark mode** dispon√≠vel no canto superior\n‚Ä¢ **Notifica√ß√µes** no sino superior direito';
    }
    
    return 'ü§î **Posso ajudar com:**\n\n**üìç Navega√ß√£o:**\n‚Ä¢ "Como navegar no sistema"\n‚Ä¢ "Onde encontrar agendamentos"\n\n**üè† Gest√£o:**\n‚Ä¢ "Como cadastrar moradores"\n‚Ä¢ "Como gerar boletos"\n‚Ä¢ "Como controlar visitantes"\n\n**üìä Relat√≥rios:**\n‚Ä¢ "Como gerar relat√≥rios"\n‚Ä¢ "Dashboard do sistema"\n\n**‚öôÔ∏è Configura√ß√µes:**\n‚Ä¢ "Como configurar o sistema"\n‚Ä¢ "Gest√£o de usu√°rios"\n\n**Seja mais espec√≠fico** para uma resposta detalhada! üí™';
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputMessage.trim(),
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    const messageText = inputMessage.trim();
    setInputMessage('');
    setIsTyping(true);

    try {
      // Simular delay de processamento para melhor UX
      await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));
      const responseText = generateLocalResponse(messageText);

      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: responseText,
        sender: 'bot',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botResponse]);
    } catch (error) {
      const errorResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: '‚ùå **Erro tempor√°rio.** Tente novamente em alguns instantes.',
        sender: 'bot',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorResponse]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('pt-BR', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div className="fixed bottom-6 right-6 z-50">
      {/* Bot√£o flutuante */}
      {!isOpen && (
        <div className="relative">
          <Button
            onClick={() => setIsOpen(true)}
            className="h-14 w-14 rounded-full bg-primary hover:bg-primary/90 shadow-lg animate-pulse"
            size="icon"
          >
            <MessageCircle className="h-6 w-6" />
          </Button>
          <div className="absolute -top-2 -left-2 bg-green-500 text-white text-xs rounded-full px-2 py-1 animate-bounce font-bold">
            BOT
          </div>
        </div>
      )}

      {/* Chat window */}
      {isOpen && (
        <Card 
          className={cn(
            "w-96 shadow-2xl transition-all duration-300",
            isMinimized ? "h-14" : "h-[600px]"
          )}
        >
          {/* Header */}
          <CardHeader className="flex flex-row items-center justify-between p-4 bg-primary text-primary-foreground rounded-t-lg">
            <div className="flex items-center gap-2">
              <MessageCircle className="h-5 w-5" />
              <CardTitle className="text-lg">
                Assistente Admin
              </CardTitle>
              <div className="bg-green-500 text-white text-xs px-2 py-1 rounded-full">
                Online
              </div>
            </div>
            <div className="flex gap-1">
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8 text-primary-foreground hover:bg-primary-foreground/20"
                onClick={() => setIsMinimized(!isMinimized)}
              >
                {isMinimized ? <Maximize2 className="h-4 w-4" /> : <Minimize2 className="h-4 w-4" />}
              </Button>
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8 text-primary-foreground hover:bg-primary-foreground/20"
                onClick={() => setIsOpen(false)}
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </CardHeader>

          {/* Content */}
          {!isMinimized && (
            <CardContent className="p-0 flex flex-col h-[536px]">
              {/* Messages */}
              <div className="flex-1 overflow-y-auto p-4 space-y-4 min-h-0">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={cn(
                      "flex gap-2",
                      message.sender === 'user' ? "justify-end" : "justify-start"
                    )}
                  >
                    {message.sender === 'bot' && (
                      <div className="flex-shrink-0">
                        <div className="w-8 h-8 rounded-full flex items-center justify-center bg-primary">
                          <MessageCircle className="h-4 w-4 text-primary-foreground" />
                        </div>
                      </div>
                    )}
                    <div
                      className={cn(
                        "max-w-[280px] p-3 rounded-lg text-sm",
                        message.sender === 'user'
                          ? "bg-primary text-primary-foreground"
                          : "bg-muted"
                      )}
                    >
                      <div className="whitespace-pre-wrap">
                        {message.sender === 'bot' ? (
                          <MarkdownText text={message.text} />
                        ) : (
                          message.text
                        )}
                      </div>
                      <div className={cn(
                        "text-xs mt-1 opacity-70",
                        message.sender === 'user' ? "text-right" : "text-left"
                      )}>
                        {formatTime(message.timestamp)}
                      </div>
                    </div>
                    {message.sender === 'user' && (
                      <div className="flex-shrink-0">
                        <div className="w-8 h-8 bg-muted rounded-full flex items-center justify-center">
                          <MessageCircle className="h-4 w-4" />
                        </div>
                      </div>
                    )}
                  </div>
                ))}
                
                {/* Typing indicator */}
                {isTyping && (
                  <div className="flex gap-2 justify-start">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 rounded-full flex items-center justify-center bg-primary">
                        <MessageCircle className="h-4 w-4 text-primary-foreground" />
                      </div>
                    </div>
                    <div className="bg-muted p-3 rounded-lg">
                      <div className="flex gap-1">
                        <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                        <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                        <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                      </div>
                    </div>
                  </div>
                )}
                
                <div ref={messagesEndRef} />
              </div>

              {/* Input area - POSI√á√ÉO FIXA */}
              <div className="border-t p-4 bg-background flex-shrink-0">
                <div className="flex gap-2">
                  <Input
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="Digite sua pergunta sobre o sistema..."
                    className="flex-1"
                    disabled={isTyping}
                  />
                  <Button
                    onClick={handleSendMessage}
                    disabled={!inputMessage.trim() || isTyping}
                    size="icon"
                  >
                    <Send className="h-4 w-4" />
                  </Button>
                </div>
                <p className="text-xs text-muted-foreground mt-2 text-center">
                  ‚ö° Assistente local especializado em Admin SD - 100% offline
                </p>
              </div>
            </CardContent>
          )}
        </Card>
      )}
    </div>
  );
};

export default AdminChatbot;
