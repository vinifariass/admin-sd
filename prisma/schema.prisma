// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  tipo          Tipo      @default(MORADOR)
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

enum Tipo {
  ADMIN
  FUNCIONARIO
  MORADOR
}

enum TipoVeiculo {
  carro
  moto
}

enum TipoMorador {
  Proprietario
  Inquilino
}

model Parking {
  id          String      @id @default(uuid())
  nome        String
  cpf         String
  apartamento String
  placa       String
  cor         String
  modelo      String
  tipo        TipoVeiculo
  tipoMorador TipoMorador
  createdAt   DateTime @default(now())
}

model Morador {
  id          String    @id @default(uuid())
  nome        String
  cpf         String
  apartamento String
  email       String?
  telefone    String?
  dataLocacao DateTime?
  dataSaida   DateTime?
  createdAt   DateTime  @default(now())

  Encomenda Encomenda[]
}

model Encomenda {
  id             String       @id @default(uuid())
  numeroPedido   String       @unique
  moradorId      String
  morador        Morador      @relation(fields: [moradorId], references: [id])
  createdAt      DateTime     @default(now())
  dataEntrega    DateTime?
  status         StatusPedido @default(ENTREGUE)
  assinado       Boolean      @default(false)
  assinadoPor    String?
  dataAssinatura DateTime?

  @@map("encomendas")
}

enum StatusPedido {
  ENTREGUE
  DEVOLVIDO
}

model Funcionario {
  id             String             @id @default(uuid())
  nome           String
  cpf            String             @unique(map: "funcionario_cpf_idx")
  cargo          String
  salario        Float
  email          String?
  telefone       String?
  dataAdmissao   DateTime?
  dataDemissao   DateTime?
  endereco       String?
  departamento   String?
  status         StatusFuncionario? @default(ATIVO)
  foto           String?
  pis            String?
  rg             String?
  dataNascimento DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("funcionarios") // Nome da tabela no banco de dados
}

enum StatusFuncionario {
  ATIVO
  INATIVO
  AFASTADO
}

model Recibo {
  id             String   @id @default(uuid())
  nomeServico    String
  dataVencimento DateTime
  createdAt      DateTime @default(now())
}

model Agendamento {
  id          String   @id @default(uuid())
  nome        String
  apartamento String
  horario     String
  status      String
  tipo        String
  descricao   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Visitante {
  id             String   @id @default(uuid())
  nome           String
  cpf            String
  telefone       String?
  email          String?
  apartamento    String
  dataVisita     DateTime
  horario        String
  status         String   @default("AGENDADO")
  observacoes    String?
  autorizado     Boolean  @default(false)
  autorizadoPor  String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Notificacao {
  id          String   @id @default(uuid())
  titulo      String
  mensagem    String
  tipo        String   @default("INFO") // INFO, AVISO, URGENTE
  remetente   String
  destinatario String
  lida        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Gasto {
  id          String   @id @default(uuid())
  descricao   String
  valor       Float
  data        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}